.Ltext0:
write_read:
	testq	%rdx, %rdx
	je	.L1
	movl	$0, %eax
.L3:
	movq	%rax, (%rsi)
	movq	(%rdi), %rax
	addq	$1, %rax
	subq	$1, %rdx
	jne	.L3
.L1:
	rep ret
array_copy:
	testq	%rdx, %rdx
	jle	.L5
	movl	$0, %eax
.L7:
	movq	(%rdi,%rax,8), %rcx
	movq	%rcx, (%rsi,%rax,8)
	addq	$1, %rax
	cmpq	%rax, %rdx
	jne	.L7
.L5:
	rep ret
array_clear:
	testq	%rdx, %rdx
	jle	.L9
	movq	%rsi, %rax
	leaq	(%rsi,%rdx,8), %rdx
.L11:
	movq	$0, (%rax)
	addq	$8, %rax
	cmpq	%rdx, %rax
	jne	.L11
.L9:
	rep ret
array_copy_2:
	leaq	-1(%rdx), %r8
	testq	%r8, %r8
	jle	.L18
	movl	$0, %eax
.L15:
	movq	(%rdi,%rax,8), %rcx
	movq	%rcx, (%rsi,%rax,8)
	movq	8(%rdi,%rax,8), %rcx
	movq	%rcx, 8(%rsi,%rax,8)
	addq	$2, %rax
	cmpq	%rax, %r8
	jg	.L15
	leaq	-2(%rdx), %rax
	shrq	%rax
	leaq	2(%rax,%rax), %rax
	jmp	.L14
.L18:
	movl	$0, %eax
.L14:
	cmpq	%rax, %rdx
	jle	.L13
.L19:
	movq	(%rdi,%rax,8), %rcx
	movq	%rcx, (%rsi,%rax,8)
	addq	$1, %rax
	cmpq	%rax, %rdx
	jne	.L19
.L13:
	rep ret
array_clear_2:
	leaq	-1(%rdx), %rcx
	testq	%rcx, %rcx
	jle	.L27
	movl	$0, %eax
.L24:
	movq	$0, (%rsi,%rax,8)
	movq	$0, 8(%rsi,%rax,8)
	addq	$2, %rax
	cmpq	%rax, %rcx
	jg	.L24
	leaq	-2(%rdx), %rax
	shrq	%rax
	leaq	2(%rax,%rax), %rax
	jmp	.L23
.L27:
	movl	$0, %eax
.L23:
	cmpq	%rax, %rdx
	jle	.L22
.L28:
	movq	$0, (%rsi,%rax,8)
	addq	$1, %rax
	cmpq	%rax, %rdx
	jne	.L28
.L22:
	rep ret
array_copy_4:
	leaq	-3(%rdx), %r8
	testq	%r8, %r8
	jle	.L36
	movl	$0, %eax
.L33:
	movq	(%rdi,%rax,8), %rcx
	movq	%rcx, (%rsi,%rax,8)
	movq	8(%rdi,%rax,8), %rcx
	movq	%rcx, 8(%rsi,%rax,8)
	movq	16(%rdi,%rax,8), %rcx
	movq	%rcx, 16(%rsi,%rax,8)
	movq	24(%rdi,%rax,8), %rcx
	movq	%rcx, 24(%rsi,%rax,8)
	addq	$4, %rax
	cmpq	%rax, %r8
	jg	.L33
	jmp	.L32
.L36:
	movl	$0, %eax
.L32:
	cmpq	%rax, %rdx
	jle	.L31
.L37:
	movq	(%rdi,%rax,8), %rcx
	movq	%rcx, (%rsi,%rax,8)
	addq	$1, %rax
	cmpq	%rax, %rdx
	jne	.L37
.L31:
	rep ret
array_clear_3:
	leaq	-2(%rdx), %rcx
	testq	%rcx, %rcx
	jle	.L45
	movl	$0, %eax
.L42:
	movq	$0, (%rsi,%rax,8)
	movq	$0, 8(%rsi,%rax,8)
	movq	$0, 16(%rsi,%rax,8)
	addq	$3, %rax
	cmpq	%rax, %rcx
	jg	.L42
	jmp	.L41
.L45:
	movl	$0, %eax
.L41:
	cmpq	%rax, %rdx
	jle	.L40
.L46:
	movq	$0, (%rsi,%rax,8)
	addq	$1, %rax
	cmpq	%rax, %rdx
	jne	.L46
.L40:
	rep ret
array_clear_4:
	leaq	-3(%rdx), %rcx
	testq	%rcx, %rcx
	jle	.L54
	movl	$0, %eax
.L51:
	movq	$0, (%rsi,%rax,8)
	movq	$0, 8(%rsi,%rax,8)
	movq	$0, 16(%rsi,%rax,8)
	movq	$0, 24(%rsi,%rax,8)
	addq	$4, %rax
	cmpq	%rax, %rcx
	jg	.L51
	jmp	.L50
.L54:
	movl	$0, %eax
.L50:
	cmpq	%rax, %rdx
	jle	.L49
.L55:
	movq	$0, (%rsi,%rax,8)
	addq	$1, %rax
	cmpq	%rax, %rdx
	jne	.L55
.L49:
	rep ret
test2a:
	subq	$8, %rsp
	movq	%rdi, %rdx
	movl	$data, %esi
	movq	%rsi, %rdi
	movq	idx(%rip), %rax
	call	*copier(,%rax,8)
	addq	$8, %rsp
	ret

test2b:
	subq	$8, %rsp
	movq	%rdi, %rdx
	movl	$data+8, %esi
	movl	$data, %edi
	movq	idx(%rip), %rax
	call	*copier(,%rax,8)
	addq	$8, %rsp
	ret

test2c:
	subq	$8, %rsp
	movq	%rdi, %rdx
	movl	$data, %esi
	movl	$data+8, %edi
	movq	idx(%rip), %rax
	call	*copier(,%rax,8)
	addq	$8, %rsp
	ret

test2d:
	subq	$8, %rsp
	movq	%rdi, %rdx
	movl	$data2, %esi
	movl	$data, %edi
	movq	idx(%rip), %rax
	call	*copier(,%rax,8)
	addq	$8, %rsp
	ret

mem_clear:
	subq	$8, %rsp
	movq	%rsi, %rdi
	salq	$3, %rdx
	movl	$0, %esi
	call	memset
	addq	$8, %rsp
	ret

copy_array:
	testq	%rdx, %rdx
	jle	.L68
	movl	$0, %eax
.L70:
	movq	(%rdi,%rax,8), %rcx
	movq	%rcx, (%rsi,%rax,8)
	addq	$1, %rax
	cmpq	%rax, %rdx
	jne	.L70
.L68:
	rep ret
clear_array:
	testq	%rsi, %rsi
	jle	.L72
	movq	%rdi, %rax
	leaq	(%rdi,%rsi,8), %rdx
.L74:
	movq	$0, (%rax)
	addq	$8, %rax
	cmpq	%rdx, %rax
	jne	.L74
.L72:
	rep ret
clear_array_4:
	leaq	-3(%rsi), %rdx
	testq	%rdx, %rdx
	jle	.L81
	movl	$0, %eax
.L78:
	movq	$0, (%rdi,%rax,8)
	movq	$0, 8(%rdi,%rax,8)
	movq	$0, 16(%rdi,%rax,8)
	movq	$0, 24(%rdi,%rax,8)
	addq	$4, %rax
	cmpq	%rax, %rdx
	jg	.L78
	jmp	.L77
.L81:
	movl	$0, %eax
.L77:
	cmpq	%rax, %rsi
	jle	.L76
.L82:
	movq	$0, (%rdi,%rax,8)
	addq	$1, %rax
	cmpq	%rax, %rsi
	jne	.L82
.L76:
	rep ret
main:
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	subq	$8, %rsp
	movq	$0, idx(%rip)
	movl	$1024, %esi
	movl	$test2a, %edi
	call	find_cpe
	movl	$0, %ebp
	movl	$test_descr, %r13d
	jmp	.L86
.L87:
	movq	case_descr(%rbx), %rcx
	movq	%r12, %rdx
	movl	$.LC0, %esi
	movl	$1, %edi
	movl	$0, %eax
	call	__printf_chk
	movq	%rbp, idx(%rip)
	movq	case_fun(%rbx), %rdi
	movl	$1024, %esi
	call	find_cpe
	movl	$.LC1, %esi
	movl	$1, %edi
	movl	$1, %eax
	call	__printf_chk
	addq	$8, %rbx
	cmpq	$32, %rbx
	jne	.L87
	addq	$1, %rbp
	cmpq	$9, %rbp
	je	.L88
.L86:
	movl	$0, %ebx
	movq	0(%r13,%rbp,8), %r12
	jmp	.L87
.L88:
	movl	$0, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret

case_descr:
case_fun:
idx:
test_descr:
copier:
.Letext0:
.Ldebug_info0:
.Ldebug_abbrev0:
.Ldebug_loc0:
.Ldebug_ranges0:
.Ldebug_line0:
